{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Choosing best parameters for Neural Network Model (titanic)\n",
    "\n",
    "- https://www.kaggle.com/jamesleslie/titanic-neural-network-for-beginners"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "ec3a4ceb-2397-45b3-aafe-a8ffde879888",
    "_uuid": "de8369a5716eb80519979ef773ecbb135f66e4b9"
   },
   "source": [
    "<a id=\"loading\"></a>\n",
    "# 1. Load packages and data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "_cell_guid": "79c7e3d0-c299-4dcb-8224-4455121ee9b0",
    "_kg_hide-output": true,
    "_uuid": "d629ff2d2480ee46fbb7e2d37f6b5fab8052498a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TensorFlow version: 2.0.0\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.pyplot import rcParams\n",
    "%matplotlib inline\n",
    "rcParams['figure.figsize'] = 10,8\n",
    "sns.set(style='whitegrid', palette='muted',\n",
    "        rc={'figure.figsize': (15,10)})\n",
    "import os\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from keras.wrappers.scikit_learn import KerasClassifier\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Activation, Dropout\n",
    "\n",
    "import tensorflow as tf \n",
    "print (\"TensorFlow version: \" + tf.__version__)\n",
    "\n",
    "from numpy.random import seed\n",
    "# from tensorflow import set_random_seed\n",
    "# in tf 2, simply call tensorflow.random.set_seed(x), no need import above\n",
    "\n",
    "# Input data files are available in the \"../input/\" directory.\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n",
    "# print(os.listdir(\"../input\"))"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "_uuid": "e4a7f976fc617dd1563cdcf55e6159bacaba1186"
   },
   "source": [
    "print(os.listdir(\"C:/Users/Alicia/Desktop/titanic\"))"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {
    "_cell_guid": "79c7e3d0-c299-4dcb-8224-4455121ee9b0",
    "_kg_hide-output": true,
    "_uuid": "d629ff2d2480ee46fbb7e2d37f6b5fab8052498a"
   },
   "source": [
    "# Load data as Pandas dataframe\n",
    "train = pd.read_csv('C:/Users/Alicia/Desktop/titanic/data/train.csv')\n",
    "test = pd.read_csv('C:/Users/Alicia/Desktop/titanic/data/test.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. Data Feature Extraction (completed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "# features are already extracted in this case\n",
    "\n",
    "train = pd.read_csv(\"C:/Users/Alicia/Desktop/titanic/train_features.csv\")\n",
    "test = pd.read_csv(\"C:/Users/Alicia/Desktop/titanic/test_features.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "_uuid": "48b3f476bfd1b6b307560d0f7a81122fd7b4f2bd"
   },
   "outputs": [],
   "source": [
    "display_all(df.describe(include='all').T)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "bc50ae8f-a1d7-48b6-9771-e50b4e8e169b",
    "_uuid": "bbead52ea8dd6e9cba5da969375c7829a34b87d4"
   },
   "source": [
    "<a id=\"neural-network\"></a>\n",
    "# 3. Neural Network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "# from sklearn.model_selection import train_test_split\n",
    "\n",
    "predictors = train.drop(['Survived', 'PassengerId'], axis=1)\n",
    "target = train[\"Survived\"]\n",
    "# x_train, x_val, y_train, y_val = train_test_split(predictors, target, test_size = 0.20, random_state = 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "bc50ae8f-a1d7-48b6-9771-e50b4e8e169b",
    "_uuid": "bbead52ea8dd6e9cba5da969375c7829a34b87d4"
   },
   "source": [
    "## 3.1. Cross-validation\n",
    "Keras allows us to make use of cross-validation for training our model. So we will use this to train and assess our first model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "edcc8edb-a50b-4ec3-9958-06c081fbcd68",
    "_uuid": "75f56351057f33dcee93e207c4b3c461fcb65fae"
   },
   "source": [
    "### Create neural network model\n",
    "For this task, I have kept the model architecture pretty simple. We have one input layer with 17 nodes which feeds into a hidden layer with 8 nodes and an output layer which is used to predict a passenger's survival.   \n",
    "\n",
    "The output layer has a sigmoid activation function, which is used to 'squash' all our outputs to be between 0 and 1.   \n",
    "\n",
    "We are going to create a function which allows to parameterise the choice of hyperparameters in the neural network. This might seem a little overly complicated now, but it will come in super handy when we move onto tuning our parameters later."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "_uuid": "7b320adc3b344552853708b033e677a4b2cca3f7"
   },
   "outputs": [],
   "source": [
    "def create_model(lyrs=[8], act='linear', opt='Adam', dr=0.0):\n",
    "    \n",
    "    # set random seed for reproducibility\n",
    "    seed(42)\n",
    "    tf.random.set_seed(42)\n",
    "    \n",
    "    model = Sequential()\n",
    "    \n",
    "    # create first hidden layer\n",
    "    model.add(Dense(lyrs[0], input_dim=predictors.shape[1], activation=act))\n",
    "    \n",
    "    # create additional hidden layers\n",
    "    for i in range(1,len(lyrs)):\n",
    "        model.add(Dense(lyrs[i], activation=act))\n",
    "    \n",
    "    # add dropout, default is none\n",
    "    model.add(Dropout(dr))\n",
    "    \n",
    "    # create output layer\n",
    "    model.add(Dense(1, activation='sigmoid'))  # output layer\n",
    "    \n",
    "    model.compile(loss='binary_crossentropy', optimizer=opt, metrics=['accuracy'])\n",
    "    \n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "_uuid": "7f044d493a62e15bfb1e06a7f792ab53a3df7a0a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_27\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense_54 (Dense)             (None, 8)                 80        \n",
      "_________________________________________________________________\n",
      "dropout_27 (Dropout)         (None, 8)                 0         \n",
      "_________________________________________________________________\n",
      "dense_55 (Dense)             (None, 1)                 9         \n",
      "=================================================================\n",
      "Total params: 89\n",
      "Trainable params: 89\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "model = create_model()\n",
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "34a52736-364d-4f77-87c1-b432a8cc6834",
    "_uuid": "1d96485d799ad3e3850dfc5656680dec1b62ae95"
   },
   "source": [
    "### Train model\n",
    "At this stage, we have our model. We have chosen a few hyperparameters such as the number of hidden layers, the number of neurons and the activation function.\n",
    "\n",
    "The next step is to train the model on our training set. This step also requires us to choose a few more hyperparameters such as the loss function, the optimization algorithm, the number of epochs and the batch size."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "_uuid": "8b7b5329d5fb74520ea54ce7ebb6f77bcc1f698c"
   },
   "outputs": [],
   "source": [
    "# train model on full train set, with 80/20 CV split\n",
    "training = model.fit(predictors,target, epochs=100, batch_size=32, validation_split=0.2, verbose=0)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "val_acc = np.mean(training.history['val_acc'])\n",
    "print(\"\\n%s: %.2f%%\" % ('val_acc', val_acc*100))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "e32fca56ce00a0b1ad97cd65a8a9151fcc89470d"
   },
   "source": [
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "### Assess results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "_uuid": "649c26f2052b5c40e387eaaf985cd894ba0d98b4"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# summarize history for accuracy\n",
    "plt.plot(training.history['accuracy'])\n",
    "plt.plot(training.history['val_accuracy'])\n",
    "plt.title('model accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'validation'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "eabfa8a3dbb1dd061e642e8263bcf98feae6e65e"
   },
   "source": [
    "## 3.2. Grid search\n",
    "### 3.2.1. batch size and epochs\n",
    "We can see from the graph above that we might be training our network for too long. Let's use **grid search** to find out what the optimal values for `batch_size` and `epochs` are."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "_uuid": "aee8c8a76611d4e075179b2191b4da5324c472bd"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 6 candidates, totalling 18 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  13 out of  18 | elapsed:   51.9s remaining:   19.9s\n",
      "[Parallel(n_jobs=-1)]: Done  18 out of  18 | elapsed:   54.1s finished\n"
     ]
    }
   ],
   "source": [
    "# create model\n",
    "model = KerasClassifier(build_fn=create_model, verbose=0)\n",
    "\n",
    "# define the grid search parameters\n",
    "batch_size = [16, 32, 64]\n",
    "epochs = [50, 100]\n",
    "param_grid = dict(batch_size=batch_size, epochs=epochs)\n",
    "\n",
    "# search the grid\n",
    "grid = GridSearchCV(estimator=model, \n",
    "                    param_grid=param_grid,\n",
    "                    cv=3,\n",
    "                    verbose=2,\n",
    "                    n_jobs=-1)  # include n_jobs=-1 if you are using CPU\n",
    "\n",
    "grid_result = grid.fit(predictors, target) # this code takes a while to run"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "_uuid": "aee8c8a76611d4e075179b2191b4da5324c472bd",
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best: 0.808081 using {'batch_size': 64, 'epochs': 50}\n",
      "0.805836 (0.008399) with: {'batch_size': 16, 'epochs': 50}\n",
      "0.799102 (0.009655) with: {'batch_size': 16, 'epochs': 100}\n",
      "0.805836 (0.008837) with: {'batch_size': 32, 'epochs': 50}\n",
      "0.802469 (0.009655) with: {'batch_size': 32, 'epochs': 100}\n",
      "0.808081 (0.014547) with: {'batch_size': 64, 'epochs': 50}\n",
      "0.803591 (0.010408) with: {'batch_size': 64, 'epochs': 100}\n"
     ]
    }
   ],
   "source": [
    "# summarize results\n",
    "print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n",
    "means = grid_result.cv_results_['mean_test_score']\n",
    "stds = grid_result.cv_results_['std_test_score']\n",
    "params = grid_result.cv_results_['params']\n",
    "for mean, stdev, param in zip(means, stds, params):\n",
    "    print(\"%f (%f) with: %r\" % (mean, stdev, param))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "186635a5b21616833ab080a6d311d20345845acc"
   },
   "source": [
    "### 3.2.2. Optimization Algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "_uuid": "d6cafd5c7f3ccb0a2b1fa95b8f77ebd5c8ad664e"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Alicia\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:1978: FutureWarning: The default value of cv will change from 3 to 5 in version 0.22. Specify it explicitly to silence this warning.\n",
      "  warnings.warn(CV_WARNING, FutureWarning)\n",
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 6 candidates, totalling 18 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Done  13 out of  18 | elapsed:    9.8s remaining:    3.7s\n",
      "[Parallel(n_jobs=-1)]: Done  18 out of  18 | elapsed:   12.0s finished\n"
     ]
    }
   ],
   "source": [
    "# create model\n",
    "model = KerasClassifier(build_fn=create_model, epochs=50, batch_size=64, verbose=0)\n",
    "\n",
    "# define the grid search parameters\n",
    "optimizer = ['SGD', 'RMSprop', 'Adagrad', 'Adadelta', 'Adam', 'Nadam']\n",
    "param_grid = dict(opt=optimizer)\n",
    "\n",
    "# search the grid\n",
    "grid = GridSearchCV(estimator=model, param_grid=param_grid, verbose=2, n_jobs=-1)\n",
    "grid_result = grid.fit(predictors, target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "_uuid": "78ab745d56a5422ddfffa5ee525738f191ef4f28"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best: 0.813692 using {'opt': 'Adadelta'}\n",
      "0.810325 (0.025544) with: {'opt': 'SGD'}\n",
      "0.810325 (0.012992) with: {'opt': 'RMSprop'}\n",
      "0.806958 (0.018713) with: {'opt': 'Adagrad'}\n",
      "0.813692 (0.008399) with: {'opt': 'Adadelta'}\n",
      "0.808081 (0.014547) with: {'opt': 'Adam'}\n",
      "0.808081 (0.007274) with: {'opt': 'Nadam'}\n"
     ]
    }
   ],
   "source": [
    "# summarize results\n",
    "print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n",
    "means = grid_result.cv_results_['mean_test_score']\n",
    "stds = grid_result.cv_results_['std_test_score']\n",
    "params = grid_result.cv_results_['params']\n",
    "for mean, stdev, param in zip(means, stds, params):\n",
    "    print(\"%f (%f) with: %r\" % (mean, stdev, param))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "abe56e7632bdd2d6ee8da250ae0b3333481a989e"
   },
   "source": [
    "### 3.2.3. Hidden neurons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "_uuid": "0c0261b56338bbf5ec508fdee4628e243098c2c9",
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 5 candidates, totalling 15 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   8 out of  15 | elapsed:   11.2s remaining:    9.8s\n",
      "[Parallel(n_jobs=-1)]: Done  15 out of  15 | elapsed:   24.2s finished\n"
     ]
    }
   ],
   "source": [
    "seed(42)\n",
    "tf.random.set_seed(42)\n",
    "\n",
    "# create model\n",
    "model = KerasClassifier(build_fn=create_model, \n",
    "                        epochs=50, batch_size=64, verbose=0)\n",
    "\n",
    "# define the grid search parameters\n",
    "layers = [[8],[10],[10,5],[12,6],[12,8,4]]\n",
    "param_grid = dict(lyrs=layers)\n",
    "\n",
    "# search the grid\n",
    "grid = GridSearchCV(estimator=model, param_grid=param_grid, verbose=2, n_jobs=-1)\n",
    "grid_result = grid.fit(predictors, target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "_uuid": "78ab745d56a5422ddfffa5ee525738f191ef4f28"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best: 0.815937 using {'lyrs': [10]}\n",
      "0.808081 (0.014547) with: {'lyrs': [8]}\n",
      "0.815937 (0.010408) with: {'lyrs': [10]}\n",
      "0.797980 (0.029094) with: {'lyrs': [10, 5]}\n",
      "0.808081 (0.022503) with: {'lyrs': [12, 6]}\n",
      "0.804714 (0.015307) with: {'lyrs': [12, 8, 4]}\n"
     ]
    }
   ],
   "source": [
    "# summarize results\n",
    "print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n",
    "means = grid_result.cv_results_['mean_test_score']\n",
    "stds = grid_result.cv_results_['std_test_score']\n",
    "params = grid_result.cv_results_['params']\n",
    "for mean, stdev, param in zip(means, stds, params):\n",
    "    print(\"%f (%f) with: %r\" % (mean, stdev, param))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "7b629c59eebd4242e919c935c550fe4240317e9a"
   },
   "source": [
    "### 3.2.4. Dropout"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "_uuid": "0c0261b56338bbf5ec508fdee4628e243098c2c9",
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 6 candidates, totalling 18 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  13 out of  18 | elapsed:   13.1s remaining:    5.0s\n",
      "[Parallel(n_jobs=-1)]: Done  18 out of  18 | elapsed:   16.2s finished\n"
     ]
    }
   ],
   "source": [
    "# create model\n",
    "model = KerasClassifier(build_fn=create_model, \n",
    "                        epochs=50, batch_size=64, verbose=0)\n",
    "\n",
    "# define the grid search parameters\n",
    "drops = [0.0, 0.01, 0.05, 0.1, 0.2, 0.5]\n",
    "param_grid = dict(dr=drops)\n",
    "grid = GridSearchCV(estimator=model, param_grid=param_grid, verbose=2, n_jobs=-1)\n",
    "grid_result = grid.fit(predictors, target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "_uuid": "8001b384e19fc963a3936b10b5be571af1c06b2e"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best: 0.808081 using {'dr': 0.0}\n",
      "0.808081 (0.014547) with: {'dr': 0.0}\n",
      "0.786756 (0.032798) with: {'dr': 0.01}\n",
      "0.784512 (0.033332) with: {'dr': 0.05}\n",
      "0.784512 (0.033332) with: {'dr': 0.1}\n",
      "0.784512 (0.029094) with: {'dr': 0.2}\n",
      "0.771044 (0.023489) with: {'dr': 0.5}\n"
     ]
    }
   ],
   "source": [
    "# summarize results\n",
    "print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n",
    "means = grid_result.cv_results_['mean_test_score']\n",
    "stds = grid_result.cv_results_['std_test_score']\n",
    "params = grid_result.cv_results_['params']\n",
    "for mean, stdev, param in zip(means, stds, params):\n",
    "    print(\"%f (%f) with: %r\" % (mean, stdev, param))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "_uuid": "9383e7b646491d4333ff1ccb27c785b794dbc323"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_26\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense_52 (Dense)             (None, 10)                100       \n",
      "_________________________________________________________________\n",
      "dropout_26 (Dropout)         (None, 10)                0         \n",
      "_________________________________________________________________\n",
      "dense_53 (Dense)             (None, 1)                 11        \n",
      "=================================================================\n",
      "Total params: 111\n",
      "Trainable params: 111\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# create final model\n",
    "model = create_model(lyrs=[10], dr=0.0)\n",
    "\n",
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "_uuid": "b26ec6f0d56e5c48a46f16bdf230ae0483a2d21f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "891/891 [==============================] - 0s 46us/step\n",
      "\n",
      "accuracy: 82.49%\n"
     ]
    }
   ],
   "source": [
    "# train model on full train set, with 80/20 CV split\n",
    "training = model.fit(predictors, target, epochs=50, batch_size=64, \n",
    "                     validation_split=0.2, verbose=0)\n",
    "\n",
    "# evaluate the model\n",
    "scores = model.evaluate(predictors, target)\n",
    "print(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "_uuid": "4515e41b912a66d382a23708137d1e7086dfdd66"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# summarize history for accuracy\n",
    "plt.plot(training.history['accuracy'])\n",
    "plt.plot(training.history['val_accuracy'])\n",
    "plt.title('model accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'validation'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "5ccf334a-8a72-45e5-b565-cc516639e087",
    "_uuid": "ae291559b10db2f627a87f62a553d15da43ada31"
   },
   "source": [
    "## 3.3. Make Predictions on Test Set\n",
    "Finally, we can attempt to predict which passengers in the test set survived."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "_cell_guid": "48508e7a-cc0f-4c8d-a102-57451d0371de",
    "_uuid": "b40dfc26258b3a73d956db1d697c85caf9ad97bb"
   },
   "outputs": [],
   "source": [
    "# calculate predictions\n",
    "test['Survived'] = model.predict(test.drop(['PassengerId'], axis=1))\n",
    "test['Survived'] = test['Survived'].apply(lambda x: round(x,0)).astype('int')\n",
    "solution = test[['PassengerId', 'Survived']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "_uuid": "c745a7f0663c1ef0cecef30bd7a38daff6420354"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>897</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>898</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>899</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>900</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>901</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived\n",
       "0          892         0\n",
       "1          893         1\n",
       "2          894         0\n",
       "3          895         0\n",
       "4          896         1\n",
       "5          897         0\n",
       "6          898         1\n",
       "7          899         0\n",
       "8          900         1\n",
       "9          901         0"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "solution.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_cell_guid": "0f646038-2eb3-4a77-94f5-a3abc6c3be1f",
    "_uuid": "0a9b9f4189c03b253c9140c4a93c9f453508a6ba"
   },
   "source": [
    "## 3.4. Output Final Predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "_cell_guid": "04e4be98-5955-43ab-a355-be65580a1162",
    "_uuid": "7dc52ff626a2620c8607c25d85bd8952f049690b"
   },
   "outputs": [],
   "source": [
    "solution.to_csv(\"Neural_Network_Solution.csv\", index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4. Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_results = pd.read_csv(\"C:/Users/Alicia/Desktop/titanic/test_results_NN.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "266 152\n"
     ]
    }
   ],
   "source": [
    "males = 0\n",
    "females = 0\n",
    "\n",
    "for i in test_results[\"Sex\"]:\n",
    "    if (i == 0):\n",
    "        males = males +1\n",
    "    else:\n",
    "        females = females +1\n",
    "              \n",
    "print(males, females) # 266 males, 152 females"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "164"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "survivals = []\n",
    "\n",
    "count = 0\n",
    "for i in test_results[\"Survived\"]:\n",
    "    if (i == 1):\n",
    "        count = count +1\n",
    "              \n",
    "count # 156 of 418 Survived"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Survived No/Yes:\n",
      " 0    254\n",
      "1    164\n",
      "Name: Survived, dtype: int64\n",
      "\n",
      "Survived Female/Male:\n",
      " 1    142\n",
      "0     22\n",
      "Name: Sex, dtype: int64\n",
      "\n",
      "Not Survived Male/Female:\n",
      " 0    244\n",
      "1     10\n",
      "Name: Sex, dtype: int64\n",
      "\n",
      "Survived AgeGroup:\n",
      " 6    46\n",
      "4    44\n",
      "5    31\n",
      "1    15\n",
      "3    14\n",
      "2    10\n",
      "7     4\n",
      "Name: AgeGroup, dtype: int64\n",
      "\n",
      "Not Survived AgeGroup:\n",
      " 5    122\n",
      "6     58\n",
      "4     48\n",
      "3     15\n",
      "7      7\n",
      "2      3\n",
      "1      1\n",
      "Name: AgeGroup, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(\"Survived No/Yes:\\n\",test_results[\"Survived\"].value_counts())\n",
    "print()\n",
    "print(\"Survived Female/Male:\\n\",test_results[\"Sex\"][test_results[\"Survived\"] == 1].value_counts())\n",
    "print()\n",
    "print(\"Not Survived Male/Female:\\n\",test_results[\"Sex\"][test_results[\"Survived\"] == 0].value_counts())\n",
    "print()\n",
    "print(\"Survived AgeGroup:\\n\",test_results[\"AgeGroup\"][test_results[\"Survived\"] == 1].value_counts())\n",
    "print()\n",
    "print(\"Not Survived AgeGroup:\\n\",test_results[\"AgeGroup\"][test_results[\"Survived\"] == 0].value_counts())\n",
    "# note 1 2 3 4 5 6 7 correspond to \n",
    "# bins = [-1, 0, 5, 12, 18, 24, 35, 60, np.inf]\n",
    "# labels = ['Unknown', 'Baby', 'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Senior']\n",
    "# where unknown is removed. \n",
    "# hence, age groups 1 2 3 are below 18, there are 15 + 9 + 13 = 37 of them"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x21590200550>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=\"AgeGroup\", y=\"Survived\", data=test_results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x215912c8e48>"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=\"Embarked\", y=\"Survived\", data=test_results)\n",
    "#Southampton (S), Cherbourg (C), Queenstown (Q)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x215920beda0>"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=\"Pclass\", y=\"Survived\", data=test_results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
